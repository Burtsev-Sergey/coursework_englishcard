import random

import psycopg2

from telebot import types, TeleBot, custom_filters
from telebot.storage import StateMemoryStorage
from telebot.handler_backends import State, StatesGroup

import os.path
from dotenv import load_dotenv

dotenv_path = os.path.join(os.path.dirname(__file__), 'config_tokens.env')

""" –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –µ—Å–ª–∏ —Ñ–∞–π–ª config_dsn.env —Å—É—â–µ—Å—Ç–≤—É–µ—Ç """
if os.path.exists(dotenv_path):
    load_dotenv(dotenv_path)
token = os.getenv('TG_TOKEN')

""" –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞, –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞ –≤ –¢–ì """
print('Start telegram bot...')

state_storage = StateMemoryStorage()

bot = TeleBot(token, state_storage=state_storage)


""" –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö """
dbname = os.getenv('DB_NAME')
user = os.getenv('USER')
password = os.getenv('PASSWORD')
host = os.getenv('HOST')
port = os.getenv('PORT')

conn = psycopg2.connect(
  dbname=dbname,
  user=user,
  password=password,
  host=host,  
  port=port
)
cursor = conn.cursor()


""" –í—ã–±–æ—Ä —Å–ª–æ–≤ –∏–∑ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è –≤ —Ç–∞–±–ª–∏—Ü–µ user_words.
–ï—Å–ª–∏ —Å–ª–æ–≤ –≤ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–º —Å–ª–æ–≤–∞—Ä–µ –º–µ–Ω—å—à–µ 4, —Å–ª–æ–≤–∞ –≤—ã–±–∏—Ä–∞—é—Ç—Å—è –∏–∑ —Å–ª–æ–≤–∞—Ä—è –≤ —Ç–∞–±–ª–∏—Ü–µ default_words.
default_words –∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ.
–í—ã–±–∏—Ä–∞—é—Ç—Å—è —Å–ª–æ–≤–∞ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∏ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞ """
def choice_words():
  cursor.execute("SELECT COUNT(*) FROM user_words")
  row_count = cursor.fetchone()[0]
  conn.commit()

  if row_count > 4:
    cursor.execute("SELECT target_word, translate FROM user_words ORDER BY RANDOM() LIMIT 1")
    target_word, translate = cursor.fetchone()
    tw = target_word
    t = translate
    conn.commit()

    cursor.execute("SELECT target_word FROM user_words WHERE target_word <> %s", (target_word,))
    other_words = cursor.fetchall()

    if len(other_words) >= 3:
      other_words = random.sample(other_words, 3)
    else:
      other_words = other_words

    other_words = [word[0] for word in other_words]
    ow = other_words
    conn.commit()

  else:
    cursor.execute("SELECT target_word, translate FROM default_words WHERE id = 3")
    target_word, translate = cursor.fetchone()
    tw = target_word
    t = translate
    conn.commit()

    cursor.execute("SELECT target_word FROM default_words WHERE target_word <> %s", (target_word,))
    other_words = cursor.fetchall()

    if len(other_words) >= 3:
      other_words = random.sample(other_words, 3)
    else:
      other_words = other_words

    other_words = [word[0] for word in other_words]
    ow = other_words
    conn.commit()
  
  return tw, t, ow


known_users = []
userStep = {}
buttons = []


def show_hint(*lines):
    return '\n'.join(lines)


def show_target(data):
    return f"{data['target_word']} -> {data['translate_word']}"


""" –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –±–æ—Ç–∞. """
class Command:
    ADD_WORD = '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ‚ûï'
    DELETE_WORD = '–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æüîô'
    NEXT = '–î–∞–ª—å—à–µ‚è≠'


""" –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–æ—Ç–µ """
class MyStates(StatesGroup):
    target_word = State()
    translate_word = State()
    another_words = State()


""" –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è uid –ø–æ–ª—å–∑–æ–≤–∞–µ—Ç–µ–ª—è –≤ —Å–ø–∏—Å–∫–µ known_users.
–ï—Å–ª–∏ –≤ —Å–ø–∏–∏—Å–∫–µ –Ω–µ—Ç - –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å–ø–∏—Å–æ–∫ –∏ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. """
def get_user_step(uid):
    if uid in userStep:
        return userStep[uid]
    else:
        known_users.append(uid)
        userStep[uid] = 0
        print("New user detected, who hasn't used \"/start\" yet")
        return 0


""" –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ cards –∏ start. –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞.
–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ known_user. –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –±–æ—Ç–∞.
–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å–ª–æ–≤–æ–º –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞. """
@bot.message_handler(commands=['cards', 'start'])
def create_cards(message):
    cid = message.chat.id
    tw, t, ow = choice_words() 
    if cid not in known_users:
        known_users.append(cid)
        userStep[cid] = 0
        bot.send_message(cid, (
            f'–ü—Ä–∏–≤–µ—Ç üëã\n\n'
            f'–ë–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å—Å—è –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ.\n'
            f'–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–∂–Ω–æ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤ —É–¥–æ–±–Ω–æ–º –¥–ª—è —Å–µ–±—è —Ç–µ–º–ø–µ.\n'
            f'–£ –≤–∞—Å –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–∞–∂—ë—Ä, –∫–∞–∫ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä, –∏ —Å–æ–±–∏—Ä–∞—Ç—å —Å–≤–æ—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –±–∞–∑—É –¥–ª—è –æ–±—É—á–µ–Ω–∏—è.\n\n'
            f'–î–ª—è —ç—Ç–æ–≥–æ –≤–æ—Å–ø—Ä–æ–ª—å–∑—É–π—Ç–µ—Å—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏:\n'
            f'- –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï,\n'
            f'- –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ üîô.\n\n'
            f'–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–ª–æ–≤—É:\n'
            f'- –î–∞–ª—å—à–µ‚è≠.\n\n'
            f'–ù—É —á—Ç–æ, –Ω–∞—á–Ω—ë–º ‚¨áÔ∏è'))
    markup = types.ReplyKeyboardMarkup(row_width=2)

    global buttons
    buttons = []
    target_word = tw
    translate = t
    target_word_btn = types.KeyboardButton(target_word)
    buttons.append(target_word_btn)
    others = ow
    other_words_btns = [types.KeyboardButton(word) for word in others]
    buttons.extend(other_words_btns)
    random.shuffle(buttons)
    next_btn = types.KeyboardButton(Command.NEXT)
    add_word_btn = types.KeyboardButton(Command.ADD_WORD)
    delete_word_btn = types.KeyboardButton(Command.DELETE_WORD)
    buttons.extend([next_btn, add_word_btn, delete_word_btn])

    markup.add(*buttons)

    greeting = f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞:\nüá∑üá∫ {translate}"
    bot.send_message(message.chat.id, greeting, reply_markup=markup)
    bot.set_state(message.from_user.id, MyStates.target_word, message.chat.id)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['target_word'] = target_word
        data['translate_word'] = translate
        data['other_words'] = others


""" –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–î–∞–ª—å—à–µ‚è≠" –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç:
—Ñ—É–Ω–∫—Ü–∏—é choice_words - –Ω–æ–≤–∞—è –≤—ã–±–æ—Ä–∫–∞ —Å–ª–æ–≤ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥
—Ñ—É–Ω–∫—Ü–∏—é create_cards - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –±–æ—Ç–∞ """
@bot.message_handler(func=lambda message: message.text == Command.NEXT)
def next_cards(message):
    choice_words()
    create_cards(message)


""" –û–±—Ä–∞–±–æ—Ç—á–∏–∫ - —É–¥–∞–ª—è–µ—Ç —Å–ª–æ–≤–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã user_words –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—Å—å –≤–≤–æ–¥–∞ —Å–ª–æ–≤–∞. –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–∞–≤–Ω—ã–º 2.
–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é next_cards """
@bot.message_handler(func=lambda message: message.text.startswith("–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æüîô"))
def handle_delete_word(message):
  cid = message.chat.id
  bot.send_message(cid, "–í–≤–µ–¥–∏—Ç–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –≤–∞—à–µ–≥–æ —Å–ª–æ–≤–∞—Ä—è.")
  bot.register_next_step_handler(message, delete_word)

def delete_word(message):
  cid = message.chat.id
  target_word = message.text.strip()

  if not target_word:
    bot.send_message(cid, "–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞. –í–≤–µ–¥–∏—Ç–µ –æ–¥–Ω–æ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
    return

  cursor.execute("SELECT * FROM user_words WHERE user_id = %s AND target_word = %s", (cid, target_word))
  existing_word = cursor.fetchone()

  if existing_word:
    cursor.execute("DELETE FROM user_words WHERE user_id = %s AND target_word = %s", (cid, target_word))
    conn.commit()
    bot.send_message(cid, (f'–°–ª–æ–≤–æ "{target_word}" –∏ –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –≤–∞—à–µ–≥–æ —Å–ª–æ–≤–∞—Ä—è.\n'
    f'–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∏–∑—É—á–µ–Ω–∏—é –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤üìñ'))
    userStep[cid] = 2
    next_cards(message)
  else:
    bot.send_message(cid, "–¢–∞–∫–æ–≥–æ —Å–ª–æ–≤–∞ –Ω–µ—Ç –≤ –≤–∞—à–µ–º —Å–ª–æ–≤–∞—Ä–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –≤–≤–æ–¥–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    handle_delete_word(message)



""" –û–±—Ä–∞–±–æ—Ç—á–∏–∫ - –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü—É user_words - id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –¢–ì, –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ –∏ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å—Ç—å –∏–ª–∏ –Ω–µ—Ç –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ –≤ —Ç–∞–±–ª–∏—Ü–µ user_words —É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
–í–≤–æ–¥ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —Å–ª–æ–≤–∞ –∏ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.
–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–∞–≤–Ω—ã–º 1.
–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é next_cards  """
@bot.message_handler(func=lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ‚ûï" or userStep.get(message.chat.id, 0) == 1)
def handle_add_word(message):
    cid = message.chat.id
    bot.send_message(cid, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ –∏ –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")
    userStep[cid] = 1
    bot.register_next_step_handler(message, add_word)


def add_word(message):
    cid = message.chat.id
    userStep[cid] = 0 
    words = message.text.strip().split(maxsplit=1)

    if len(words) != 2:
      bot.send_message(cid, "–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞. –í–≤–µ–¥–∏—Ç–µ –æ–¥–Ω–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ –∏ –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª–æ–º.")
      userStep[cid] = 1
      bot.register_next_step_handler(message, add_word)
      return

    target_word, translate = words

    cursor.execute("SELECT * FROM user_words WHERE user_id = %s AND target_word = %s", (cid, target_word))
    existing_word = cursor.fetchone()

    if existing_word:
      bot.send_message(cid, "–°–ª–æ–≤–æ —É–∂–µ –µ—Å—Ç—å –≤ –≤–∞—à–µ–º —Å–ª–æ–≤–∞—Ä–µ. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ —Å–ª–æ–≤–æ –∏ –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")
      userStep[cid] = 1
      bot.register_next_step_handler(message, add_word)
    else:
      if cid not in known_users:
        cursor.execute("INSERT INTO users (id, state) VALUES (%s, %s)", (cid, userStep[cid]))
        conn.commit()
        known_users.add(cid)

      cursor.execute("INSERT INTO user_words (user_id, target_word, translate) VALUES (%s, %s, %s)", (cid, target_word, translate))
      conn.commit()

      bot.send_message(cid, (f'–ö–∞—Ä—Ç–æ—á–∫–∞ —Å –Ω–æ–≤—ã–º —Å–ª–æ–≤–æ–º "{target_word}" –∏ –ø–µ—Ä–µ–≤–æ–¥–æ–º "{translate}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n'
                 f'–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∏–∑—É—á–µ–Ω–∏—é –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤üìñ'))

      next_cards(message)
    

""" –û–±—Ä–∞–±–æ—Ç—á–∏–∫ - –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —Å–ª–æ–≤–∞ –¥–ª—è —Å–ª–æ–≤–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º """
@bot.message_handler(func=lambda message: True, content_types=['text'])
def message_reply(message):
    text = message.text
    markup = types.ReplyKeyboardMarkup(row_width=2)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        target_word = data['target_word']
        if text == target_word:
            hint = show_target(data)
            hint_text = ["–û—Ç–ª–∏—á–Ω–æ!‚ù§", hint]
            next_btn = types.KeyboardButton(Command.NEXT)
            add_word_btn = types.KeyboardButton(Command.ADD_WORD)
            delete_word_btn = types.KeyboardButton(Command.DELETE_WORD)
            buttons.extend([next_btn, add_word_btn, delete_word_btn])
            hint = show_hint(*hint_text)
        else:
            for btn in buttons:
                if btn.text == text:
                    btn.text = text + '‚ùå'
                    break
            hint = show_hint("–î–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞!",
                              f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –≤—Å–ø–æ–º–Ω–∏—Ç—å —Å–ª–æ–≤–æ üá∑üá∫{data['translate_word']}")
    markup.add(*buttons)
    bot.send_message(message.chat.id, hint, reply_markup=markup)
        

bot.add_custom_filter(custom_filters.StateFilter(bot))

""" –ú–µ—Ç–æ–¥ –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è """
bot.infinity_polling(skip_pending=True)