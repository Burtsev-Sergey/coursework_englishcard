import random

import psycopg2

from telebot import types, TeleBot, custom_filters
from telebot.storage import StateMemoryStorage
from telebot.handler_backends import State, StatesGroup

import os.path
from dotenv import load_dotenv

dotenv_path = os.path.join(os.path.dirname(__file__), 'config_tokens.env')

""" –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –µ—Å–ª–∏ —Ñ–∞–π–ª config_dsn.env —Å—É—â–µ—Å—Ç–≤—É–µ—Ç """
if os.path.exists(dotenv_path):
    load_dotenv(dotenv_path)
token = os.getenv('TG_TOKEN')

""" –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞, –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞ –≤ –¢–ì """
print('Start telegram bot...')

state_storage = StateMemoryStorage()

bot = TeleBot(token, state_storage=state_storage)

""" –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö """
dbname = os.getenv('DB_NAME')
user = os.getenv('USER')
password = os.getenv('PASSWORD')
host = os.getenv('HOST')
port = os.getenv('PORT')

conn = psycopg2.connect(
  dbname=dbname,
  user=user,
  password=password,
  host=host,  
  port=port
)
cursor = conn.cursor()

""" –í—ã–±–æ—Ä —Å–ª–æ–≤ –∏–∑ –æ–±—â–µ–≥–æ —Å–ª–æ–≤–∞—Ä—è - —Ç–∞–±–ª–∏—Ü–∞ default_words.
–î–ª—è –∫–Ω–æ–ø–æ–∫ –∏ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞-–ø–µ—Ä–µ–≤–æ–¥–∞ """
cursor.execute("SELECT target_word, translate FROM default_words WHERE id = 2")
target_word, translate = cursor.fetchone()
tw = target_word
t = translate
# print(tw, t)
conn.commit()

cursor.execute("SELECT target_word FROM default_words WHERE target_word <> %s", (target_word,))
other_words = cursor.fetchall()
other_words = random.sample(other_words, 3)
other_words = [word[0] for word in other_words]
ow = other_words
# print(ow)
conn.commit()


known_users = []
userStep = {}
buttons = []


def show_hint(*lines):
    return '\n'.join(lines)


def show_target(data):
    return f"{data['target_word']} -> {data['translate_word']}"

""" –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –±–æ—Ç–∞. """
class Command:
    ADD_WORD = '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï'
    DELETE_WORD = '–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æüîô'
    NEXT = '–î–∞–ª—å—à–µ ‚è≠'

""" –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è """
class MyStates(StatesGroup):
    target_word = State()
    translate_word = State()
    another_words = State()

""" –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è uid –ø–æ–ª—å–∑–æ–≤–∞–µ—Ç–µ–ª—è –≤ —Å–ø–∏—Å–∫–µ known_users.
–ï—Å–ª–∏ –Ω–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å–ø–∏—Å–æ–∫ –∏ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. """
def get_user_step(uid):
    if uid in userStep:
        return userStep[uid]
    else:
        known_users.append(uid)
        userStep[uid] = 0
        print("New user detected, who hasn't used \"/start\" yet")
        return 0


""" –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ cards –∏ start. –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞.
–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ known_user. –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –±–æ—Ç–∞.
–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å–ª–æ–≤–æ–º –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–µ–Ω –ø–µ—Ä–µ–≤–æ–¥. """
@bot.message_handler(commands=['cards', 'start'])
def create_cards(message):
    cid = message.chat.id
    # print(f'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¢–µ–ª–µ–≥—Ä–∞–º: {cid}')
    if cid not in known_users:
        known_users.append(cid)
        userStep[cid] = 0
        bot.send_message(cid, (
            f'–ü—Ä–∏–≤–µ—Ç üëã\n\n'
            f'–î–∞–≤–∞–π –ø–æ–ø—Ä–∞–∫—Ç–∏–∫—É–µ–º—Å—è –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ.\n'
            f'–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–∂–µ—à—å –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤ —É–¥–æ–±–Ω–æ–º –¥–ª—è —Å–µ–±—è —Ç–µ–º–ø–µ.\n'
            f'–£ —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–∞–∂—ë—Ä, –∫–∞–∫ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä, –∏ —Å–æ–±–∏—Ä–∞—Ç—å —Å–≤–æ—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –±–∞–∑—É –¥–ª—è –æ–±—É—á–µ–Ω–∏—è.\n\n'
            f'–î–ª—è —ç—Ç–æ–≥–æ –≤–æ—Å–ø—Ä–æ–ª—å–∑—É–π—Å—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏:\n'
            f'- –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï,\n'
            f'- —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ üîô.\n\n'
            f'–ù—É —á—Ç–æ, –Ω–∞—á–Ω—ë–º ‚¨áÔ∏è'))
    markup = types.ReplyKeyboardMarkup(row_width=2)

    global buttons
    buttons = []
    target_word = tw  # –±—Ä–∞—Ç—å –∏–∑ –ë–î
    translate = t  # –±—Ä–∞—Ç—å –∏–∑ –ë–î
    target_word_btn = types.KeyboardButton(target_word)
    buttons.append(target_word_btn)
    others = ow  # –±—Ä–∞—Ç—å –∏–∑ –ë–î
    other_words_btns = [types.KeyboardButton(word) for word in others]
    buttons.extend(other_words_btns)
    random.shuffle(buttons)
    next_btn = types.KeyboardButton(Command.NEXT)
    add_word_btn = types.KeyboardButton(Command.ADD_WORD)
    delete_word_btn = types.KeyboardButton(Command.DELETE_WORD)
    buttons.extend([next_btn, add_word_btn, delete_word_btn])

    markup.add(*buttons)

    greeting = f"–í—ã–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞:\nüá∑üá∫ {translate}"
    bot.send_message(message.chat.id, greeting, reply_markup=markup)
    bot.set_state(message.from_user.id, MyStates.target_word, message.chat.id)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['target_word'] = target_word
        data['translate_word'] = translate
        data['other_words'] = others


""" –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ create_cards """
@bot.message_handler(func=lambda message: message.text == Command.NEXT)
def next_cards(message):
    create_cards(message)


""" –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —É–¥–∞–ª—è—Ç—å —Å–ª–æ–≤–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã user_words """
@bot.message_handler(func=lambda message: message.text == Command.DELETE_WORD)
def delete_word(message):
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        print(data['target_word'])  # —É–¥–∞–ª–∏—Ç—å –∏–∑ –ë–î


""" –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ—Ç–æ—Ä—ã–π –¥–æ–±–∞–≤–ª—è–µ—Ç id –≤ –¢–ì –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–ª–æ–≤–∞ –≤ —Ç–∞–±–ª–∏—Ü—É user_words.
–ü–æ–∫–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ –∏ id. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è """
@bot.message_handler(func=lambda message: message.text == Command.ADD_WORD)
def add_word(message):
    cid = message.chat.id
    userStep[cid] = 1
    state = userStep[cid]
    # print(message.text)  # —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î
    print(f'—Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ ADD_WORD: {state}')
    if cid not in known_users:
        cursor.execute(
            "INSERT INTO users (user_id, current_state) VALUES (%s, %s);",
            (cid, state)
            )
        conn.commit()
        cursor.execute(
            "INSERT INTO user_words (user_id, target_word) VALUES (%s, %s);",
            (cid, target_word)
            )
        conn.commit()
    else:
        cursor.execute(
            "INSERT INTO user_words (user_id, target_word) VALUES (%s, %s);",
            (cid, target_word)
            )
        conn.commit()


""" –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞-–ø–µ—Ä–µ–≤–æ–¥–∞ """
@bot.message_handler(func=lambda message: True, content_types=['text'])
def message_reply(message):
    cid = message.chat.id
    state = userStep[cid]
    print(f'—Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–ª–æ–≤–∞-–ø–µ—Ä–µ–≤–æ–¥–∞: {state}')
    if state != 1:
        text = message.text
        markup = types.ReplyKeyboardMarkup(row_width=2)
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            target_word = data['target_word']
            if text == target_word:
                hint = show_target(data)
                hint_text = ["–û—Ç–ª–∏—á–Ω–æ!‚ù§", hint]
                next_btn = types.KeyboardButton(Command.NEXT)
                add_word_btn = types.KeyboardButton(Command.ADD_WORD)
                delete_word_btn = types.KeyboardButton(Command.DELETE_WORD)
                buttons.extend([next_btn, add_word_btn, delete_word_btn])
                hint = show_hint(*hint_text)
            else:
                for btn in buttons:
                    if btn.text == text:
                        btn.text = text + '‚ùå'
                        break
                hint = show_hint("–î–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞!",
                                 f"–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –≤—Å–ø–æ–º–Ω–∏—Ç—å —Å–ª–æ–≤–æ üá∑üá∫{data['translate_word']}")
        markup.add(*buttons)
        bot.send_message(message.chat.id, hint, reply_markup=markup)
    else:
        print('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —Å–ª–æ–≤–æ')
        

bot.add_custom_filter(custom_filters.StateFilter(bot))

""" –ú–µ—Ç–æ–¥ –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è """
bot.infinity_polling(skip_pending=True)